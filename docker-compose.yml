services:
  adminer:
    image: adminer
    container_name: tr3_adminer
    restart: always
    ports:
      - "8080:8080"
    networks:
      - tr3_network

  # # mysql:
  # #   image: mysql:8.0
  # #   container_name: mysql
  # #   restart: always
  # #   env_file:
  # #     - .env 
  # #   environment:
  # #     MYSQL_ROOT_PASSWORD: "${MYSQL_ROOT_PASSWORD}"
  # #     MYSQL_DATABASE: "${MYSQL_DATABASE}"
  # #     MYSQL_USER: "${MYSQL_USER}"
  # #     MYSQL_PASSWORD: "${MYSQL_PASSWORD}"
  # #   ports:
  # #     - "3306:3306"
  # #   volumes:
  # #     - mysql_data:/var/lib/mysql
  # #   healthcheck:
  # #     test: ["CMD", "mysqladmin", "ping", "-h", "127.0.0.1"]
  # #     interval: 10s
  # #     timeout: 5s
  # #     retries: 3
  # #   networks:
  # #     - tr3_network
      
      

  mysql:
    image: mysql:8.0
    container_name: mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: tr3-sql
      MYSQL_USER: admin
      MYSQL_PASSWORD: contraseña
    ports:
      - "3306:3306"
    volumes:
      - ./mysql_data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - tr3_network


  # mongodb:
  #   image: mongo
  #   container_name: mongo
  #   environment:
  #     MONGO_INITDB_ROOT_USERNAME: "${MONGO_USER}"
  #     MONGO_INITDB_ROOT_PASSWORD: "${MONGO_PASSWORD}"
  #   ports:
  #     - "27017:27017"
  #   volumes:
  #     - mongo_data:/data/db
  #   restart: unless-stopped
  #   networks:
  #     - tr3_network
  #   healthcheck:
  #     test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
  #     interval: 10s
  #     timeout: 10s
  #     retries: 3

  # mongo-express:
  #   image: mongo-express
  #   container_name: tr3_mongo_express
  #   ports:
  #     - "8081:8081"
  #   env_file:
  #     - ./back/environment/.env  # Carga las variables del archivo .env
  #   environment:
  #     ME_CONFIG_BASICAUTH_USERNAME: "${MONGO_USER}"
  #     ME_CONFIG_BASICAUTH_PASSWORD: "${MONGO_PASSWORD}"
  #     ME_CONFIG_MONGODB_AUTH_DATABASE: "${MONGO_DB}"  # Base de datos para autenticación
  #     ME_CONFIG_MONGODB_AUTH_USERNAME: "${MONGO_USER}"  # Expande correctamente la variable
  #     ME_CONFIG_MONGODB_AUTH_PASSWORD: "${MONGO_PASSWORD}"  # Expande correctamente la variable
  #     ME_CONFIG_MONGODB_SERVER: mongo  # Nombre del contenedor MongoDB

  #   restart: unless-stopped
  #   depends_on:
  #     - mongodb
  #   networks:
  #     - tr3_network

  mongodb:
    image: mongo
    container_name: mongo
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    restart: unless-stopped
    networks:
      - tr3_network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 10s
      retries: 3

  mongo-express:
    image: mongo-express
    container_name: tr3_mongo_express
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_BASICAUTH_USERNAME: root
      ME_CONFIG_BASICAUTH_PASSWORD: example
      # ME_CONFIG_MONGODB_AUTH_DATABASE: tr3_mongo_db  # Base de datos para autenticación
      ME_CONFIG_MONGODB_AUTH_USERNAME: root  # Usuario de MongoDB
      ME_CONFIG_MONGODB_AUTH_PASSWORD: example  # Contraseña de MongoDB
      ME_CONFIG_MONGODB_URL: "mongodb://root:example@mongo:27017"
    restart: unless-stopped
    depends_on:
      - mongodb
    networks:
      - tr3_network


  frontend:
    build:
      context: ./front
      dockerfile: dev.Dockerfile
    container_name: tr3_frontend
    restart: always
    ports:
      - "4000:4000"
    environment:
      - NODE_ENV=development
      - CHOKIDAR_USEPOLLING=true
    volumes:
    - ./front/vuetify-project:/app/frontend  # Monta el código dentro del contenedor
    - /app/frontend/node_modules  # Evita sobrescribir node_modules
    networks:
      - tr3_network

  backend:
    build:
      context: ./back
      dockerfile: dockerImage/dev.Dockerfile
    container_name: tr3_backend
    restart: always
    ports:
      - "3000:3000"
    networks:
      - tr3_network
    depends_on:
      mysql:
        condition: service_healthy
      mongodb:
        condition: service_healthy  # <- Añadir condición de salud
    command: sh -c "node database/config/sync.js && node database/config/mongoConfig.js && npm run dev"

networks:
  tr3_network:
    # Definición de la red
    driver: bridge
volumes:
  mysql_data:
  mongo_data:
